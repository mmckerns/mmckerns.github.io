<?xml version="1.0"?>
<rss xmlns:iweb="http://www.apple.com/iweb" version="2.0">
  <channel>
    <title>Software</title>
    <link>http://www.cacr.caltech.edu/~mmckerns/Mike_McKerns/Software</link>
    <description>Writing well-engineered software is hard, but ultimately it pays off.  In the end, poorly-engineered software limits the analysis capabilities the user has available, and ultimately becomes a roadblock to new science. I focus on three levels of software: (i) computational models and utilities, (ii) computational frameworks, and (iii) software infrastructure. Well-engineered models not only can provide simulations of real experiments and measurements, but can serve as building blocks in larger multi-scale and multi-physics calculations. Computational frameworks provide an environment for composing large-scale simulations or calculations, such as performing sensitivity analysis for a parameterized materials model within a virtual neutron experiment, or using fitting to predict excited-state molecular conformations from measured time-resolved Raman spectra. Many of the calculations that are scientifically relevant as also computationally challenging. Thus, I have produced software infrastructure that strives to facilitate high-performance parallel and distributed computing in a simple and transparent way, allowing the developer to extend their model analysis to thousands of nodes and across multiple machines with the addition of a few simple lines of code.</description>
    <item>
      <title>M. McKerns, M.A.G. Aivazis, &#x201C;pathos: a framework for heterogeneous computing&#x201D;, http://dev.danse.us/trac/pathos</title>
      <link>http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_M._McKerns,_M.A.G._Aivazis,_pathos__a_framework_for_heterogeneous_computing,_http___dev.danse.us_trac_pathos.html</link>
      <guid isPermaLink="false">e62c432b-22e7-452d-9867-e25bf1eb62ba</guid>
      <pubDate>Sat, 31 Jul 2010 22:54:12 -0700</pubDate>
      <description>Modern calculations such as global optimizations and parameter sensitivity studies can require huge computational resources for all but the simplest of models. The need to prepare, schedule and monitor hundreds of runs and interactively explore and analyze data is a challenging problem. Managing such a complex computational environment requires a sophisticated software framework which can distribute the computation on remote nodes hiding the complexity of the communication in such a way that a scientist can concentrate on the details of computation. Pathos is a computational job management framework that offers a simple, efficient, and consistent user experience in a variety of heterogeneous environments from multi-core workstations to networks of large-scale computer clusters. Pathos provides a single environment for developing and testing algorithms locally -- and enables the user to execute the algorithms on remote clusters, while providing user full access to their job history. &lt;br/&gt;&lt;br/&gt;Pathos primarily provides the communication mechanisms for configuring and launching parallel computations across heterogenous resources. Pathos provides stagers and launchers for parallel and distributed computing, where each launcher contains the syntactic logic to configure and launch jobs in an execution environment. Some examples of included launchers are: a queue-less MPI-based launcher, a ssh-based launcher, and a multiprocessing launcher. Pathos also provides a map-reduce algorithm for each of the available launchers, thus greatly lowering the barrier for users to extend their code to parallel and distributed resources. Pathos provides the ability to interact with batch schedulers and queuing systems, thus allowing large computations to be easily launched on high-performance computing resources. One of the most powerful features of pathos is &amp;quot;tunnel&amp;quot;, which enables a user to automatically wrap any distributed service calls within a ssh-tunnel. Pathos also includes utilities for filesystem exploration and automated builds, and a utility for the serialization of python objects.</description>
      <iweb:image href="Media/object014.jpg"></iweb:image>
      <iweb:comment link="http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_M._McKerns,_M.A.G._Aivazis,_pathos__a_framework_for_heterogeneous_computing,_http___dev.danse.us_trac_pathos.html#comment_layer" count="0" enabled="0"></iweb:comment>
    </item>
    <item>
      <title>J.Y.Y. Lin, et al., &#x201C;VNF: a facility for computational neutron scattering science&#x201D;, http://vnf.caltech.edu</title>
      <link>http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_J.Y.Y._Lin,_et_al.,_VNF__a_facility_for_computational_neutron_scattering_science,_http___vnf.caltech.edu.html</link>
      <guid isPermaLink="false">8833babb-c741-4123-b4e0-3c28a7e827f7</guid>
      <pubDate>Sat, 31 Jul 2010 22:54:09 -0700</pubDate>
      <description>The Virtual Neutron Facility (VNF) is a web service that integrates scientific software packages for material simulations and Monte-Carlo simulations of neutron scattering. VNF is an online tool that allows users to perform end-to-end, full simulations of neutron scattering experiments. VNF enables neutron scientists to gain insight into material properties by providing a single environment to validate materials modeling and analysis against experimental results. A user can select from pre-configured neutron instruments, sample containers, samples, and physics kernels, or can create their own to match their own experiment.</description>
      <iweb:image href="Media/object011.jpg"></iweb:image>
      <iweb:comment link="http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_J.Y.Y._Lin,_et_al.,_VNF__a_facility_for_computational_neutron_scattering_science,_http___vnf.caltech.edu.html#comment_layer" count="0" enabled="0"></iweb:comment>
    </item>
    <item>
      <title>M. McKerns, P. Hung, M.A.G. Aivazis, &#x201C;mystic: a simple model-independent inversion framework&#x201D;, http://dev.danse.us/trac/mystic</title>
      <link>http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_M._McKerns,_P._Hung,_M.A.G._Aivazis,_mystic__a_simple_model-independent_inversion_framework,_http___dev.danse.us_trac_mystic.html</link>
      <guid isPermaLink="false">ea448dad-991f-4202-bda7-ff8b0285e71e</guid>
      <pubDate>Sat, 31 Jul 2010 22:53:50 -0700</pubDate>
      <description>The mystic framework provides a collection of optimization algorithms and tools that lowers the barrier to solving complex optimization problems. Mystic provides a selection of optimizers, both global and local, including several gradient solvers. Every mystic optimizer provides the ability to apply bounds constraints generically and directly to the cost function, so that the difference in the speed of bounds-constrained optimization and unconstrained optimization is minimal.  Mystic also enables the user to impose an arbitrary parameter constraint function --- hence, non-bounds constraints can also be generically applied in any optimization problem. A unique and powerful feature of the framework is the ability to apply and configure solver-independent termination conditions --- a capability that greatly increases the flexibility for numerically solving problems with non-standard convergence profiles.&lt;br/&gt;&lt;br/&gt; All of mystic solvers conform to a solver API, thus also have common method calls to configure and launch an optimization job. This allows any of mystic&#x2019;s solvers to be easily swapped without the user having to write any new code. The API also makes it easy to bind a favorite 3rd party solver into the mystic framework. All optimizers included in mystic provide workflow at the fitting layer, not just access to the algorithms as function calls. Mystic gives the user fine-grained power to both monitor and steer optimizations as the fit processes are running. Wherever possible, mystic utilizes an extensible map algorithm that enables easy access to parallel and distributed computing.</description>
      <iweb:image href="Media/object008.jpg"></iweb:image>
      <iweb:comment link="http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_M._McKerns,_P._Hung,_M.A.G._Aivazis,_mystic__a_simple_model-independent_inversion_framework,_http___dev.danse.us_trac_mystic.html#comment_layer" count="0" enabled="0"></iweb:comment>
    </item>
    <item>
      <title>B. Fultz, et al., &#x201C;DANSE: distributed data analysis for neutron scattering experiments&#x201D;, http://danse.us</title>
      <link>http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_B._Fultz,_et_al.,_DANSE__distributed_data_analysis_for_neutron_scattering_experiments,_http___danse.us.html</link>
      <guid isPermaLink="false">373c17c0-48fa-4b65-bacd-7d4beaea8d5f</guid>
      <pubDate>Sat, 31 Jul 2010 22:53:31 -0700</pubDate>
      <description>The DANSE project was prompted by the development of the Spallation Neutron Source (SNS) in Oak Ridge, Tennessee. Neutron scattering experiments performed at the SNS will produce data of unprecedented detail on the positions and motions of atoms and spins in materials, molecules, and condensed matter. The raw experimental data acquired with these instruments are not simple to interpret, and new software is required to transform the data into useful forms. Beyond such data reductions that are available today, there is an opportunity to interpret data using several major advances in computational materials science that have occurred over the past decade. The goals differ for each subfield of neutron science, but typically involve the fitting of experimental data to underlying physical models, simulations, or constraints imposed from other measurements. &lt;br/&gt;&lt;br/&gt;The exponential growth of computing power and resources enables increasingly complex simulations. A paradigm shift in software development is required -- the encapsulation of existing codes as independent &#x201C;engines&#x201D; interoperating in an integrated software environment is a more feasible approach for solving problems that require massively parallel architectures and large-scale distributed resources.  Similarly, the exploitation of new scientific opportunities provided by the higher quality data, and higher data acquisition rates, at the SNS requires the collaborative production of software on a scale unfamiliar to x-ray and neutron researchers.&lt;br/&gt;&lt;br/&gt;DANSE provides Monte Carlo neutron instrument simulations with robust sample material and sample container descriptions, where full direct simulation of neutron experiments are possible in DANSE by coupling the Monte Carlo sample to a materials theory engine. A robust global optimization framework enables existing forward models (i.e. engines) to be used in the prediction of materials and system parameters. The ability to quickly fit to experimental data allows for detailed pre-planning of experiments, or refining system or instrument parameters during the during the course of an experiment. Both increase the efficiency of a scientist&#x2019;s beam time, and lower the barrier to new science.</description>
      <iweb:image href="Media/object007.jpg"></iweb:image>
      <iweb:comment link="http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_B._Fultz,_et_al.,_DANSE__distributed_data_analysis_for_neutron_scattering_experiments,_http___danse.us.html#comment_layer" count="0" enabled="0"></iweb:comment>
    </item>
    <item>
      <title>T. Kelley, M. McKerns, et al., &#x201C;ARCS: software for a wide angle-range chopper spectrometer at the SNS&#x201D;, http://www.cacr.caltech.edu/projects/ARCS/Software.html</title>
      <link>http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_T._Kelley,_M._McKerns,_et_al.,_ARCS__software_for_a_wide_angle-range_chopper_spectrometer_at_the_SNS,_http___www.cacr.caltech.edu_projects_ARCS_Software.html.html</link>
      <guid isPermaLink="false">20b4b75b-899d-4da6-b20c-805e708b0e98</guid>
      <pubDate>Sat, 31 Jul 2010 15:06:14 -0700</pubDate>
      <description>The ARCS spectrometer will advance the science of dynamical processes in materials. It is designed to measure excitations in materials and condensed matter having energies from a few meV to several hundred meV, with an efficiency better than any existing high-energy chopper spectrometer. ARCS is designed to enable research investigations of vibrational excitations and their relationship to phase diagrams and equations of state of materials, including materials with correlated electrons, and to measure spin correlations in magnets, superconductors, and materials close to metal-insulator transitions.&lt;br/&gt;&lt;br/&gt;The ARCS software primarily provides the ability to transform raw data from the instrument in the form of time-of-flight histograms into scattering intensity S(Q,E). This functionality is provided for both powder and isotropic scatterers. Monte Carlo simulations of the ARCS instrument are also available. Each individual neutron trajectory is calculated, from moderator to detector, and then the counts on the virtual detector can be compared against experiments. A neutron instrument is composed of several neutron components, or building blocks, thus greatly simplifying the reconfiguration of the instrument as required by the experiment. The majority of the neutron components available are based on the McStas package from Riso, with a few notable exceptions. A &#x201C;sample&#x201D; component is available, which can contain a number of different physical scatterers and scattering kernels. These scattering kernels inject materials physics into the instrument simulation, so that effects such as incoherent inelastic scattering and/or coherent inelastic scattering can be accurately simulated. More advanced kernels that support lattice dynamics and Heisenberg dynamics are also provided.</description>
      <iweb:image href="Media/object003.jpg"></iweb:image>
      <iweb:comment link="http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_T._Kelley,_M._McKerns,_et_al.,_ARCS__software_for_a_wide_angle-range_chopper_spectrometer_at_the_SNS,_http___www.cacr.caltech.edu_projects_ARCS_Software.html.html#comment_layer" count="0" enabled="0"></iweb:comment>
    </item>
    <item>
      <title>M.A.G. Aivazis, et al., &#x201C;pyre: an integration framework for high-performance computing&#x201D;, http://danse.us/trac/pyre</title>
      <link>http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_M.A.G._Aivazis,_et_al.,_pyre__an_integration_framework_for_high-performance_computing,_http___danse.us_trac_pyre.html</link>
      <guid isPermaLink="false">3f073169-c87a-49b3-8ae6-1d1ec119f62a</guid>
      <pubDate>Sat, 31 Jul 2010 15:00:00 -0700</pubDate>
      <description>Pyre is an integration framework for high performance computing. Written in Python, pyre is an extensible, object-oriented framework for specifying and staging complex, multi-physics simulations. Pyre provides developers of scientific computing software with a set of development tools, such as the &lt;a href="http://docs.danse.us/pyre/sphinx/pyreBasics.html#pyre-inventory"&gt;easy specification&lt;/a&gt; of user inputs for computing engines, &lt;a href="http://docs.danse.us/pyre/sphinx/pyreBasics.html#pyre-component"&gt;a decomposition scheme&lt;/a&gt; to construct sophisticated scientific software in a layered architecture, and a mechanism for &lt;a href="http://docs.danse.us/pyre/sphinx/pyreLibraries.html#journal"&gt;distributed debugging support&lt;/a&gt;. Pyre promotes intelligent software development by facilitating componentization, reusability, and the application of software design patterns.&lt;br/&gt;&lt;br/&gt;If a developer girdles their existing code in a thin framework layer, the code becomes a pyre component, and is available for deployment in larger framework applications. Pyre manage the life-cycle and interactions of components in an elegant way, and removes the burden from the user in writing potentially fragile application infrastructure. By enforcing component interface specifications, pyre attempts to solve a very hard problem -- to make independently developed applications work together seamlessly. Because pyre components act as building blocks for larger applications, and pyre applications can be configured with simple key-value pairs, pyre developers benefit from much shorter concept-to-deployment costs.</description>
      <iweb:image href="Media/object001.jpg"></iweb:image>
      <iweb:comment link="http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/31_M.A.G._Aivazis,_et_al.,_pyre__an_integration_framework_for_high-performance_computing,_http___danse.us_trac_pyre.html#comment_layer" count="0" enabled="0"></iweb:comment>
    </item>
    <item>
      <title>M. McKerns, &#x201C;pyIDL: python bindings to IDL&#x201D;, http://www.cacr.caltech.edu/projects/danse/pyIDL.html</title>
      <link>http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/30_M._McKerns,_pyIDL__python_bindings_to_IDL,_http___www.cacr.caltech.edu_projects_danse_pyIDL.html.html</link>
      <guid isPermaLink="false">634c774e-9154-4319-9a3f-c3c56eb7ed72</guid>
      <pubDate>Fri, 30 Jul 2010 12:56:05 -0700</pubDate>
      <description>IDL is a dynamically typed language, similar to python, with the ability to create and manipulate variables at runtime. IDL has a scripting interface and an extensive library of scientific functions and visualization capabilities. IDL strives to enable the user to create meaningful visual representations of data in a minimal number of lines of code.&lt;br/&gt;&lt;br/&gt;While IDL provides a simple interactive data language and powerful graphics, it is not a natural environment for building large programs. IDL lacks several of numpy&#x2019;s capabilities for easily manipulating data arrays, and is also hindered by all variables sharing a single namespace. However, with pyIDL, IDL&#x2019;s large scientific library and advanced visualization capabilities are available from python. At the core, pyIDL provides the ability to seamlessly exchange variables and data objects between python and IDL. Also, pyIDL provides methods that can invoke IDL functions and procedures directly from python, and with python data objects. For users that are transitioning to python, pyIDL provides an &#x201C;interactive&#x201D; mode which yields direct access to the IDL scripting prompt.</description>
      <iweb:image href="Media/object095.jpg"></iweb:image>
      <iweb:comment link="http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/30_M._McKerns,_pyIDL__python_bindings_to_IDL,_http___www.cacr.caltech.edu_projects_danse_pyIDL.html.html#comment_layer" count="0" enabled="0"></iweb:comment>
    </item>
    <item>
      <title>M. McKerns, &#x201C;pygrace: python bindings to Grace&#x201D;, http://www.cacr.caltech.edu/projects/danse/pygrace.html</title>
      <link>http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/30_M._McKerns,_pygrace__python_bindings_to_Grace_2-D_plotting,_http___www.cacr.caltech.edu_projects_danse_pygrace.html.html</link>
      <guid isPermaLink="false">9323a3c6-5727-4fb9-a440-3fff1ec52772</guid>
      <pubDate>Fri, 30 Jul 2010 12:55:44 -0700</pubDate>
      <description>Grace is a WYSIWYG (what-you-see-is-what-you-get) 2D plotting tool that provides dynamically updated, interactive plots from a easy-to-use graphical interface. The Grace interface is built on top of a scripting language, which contains all the functionality of the UI. Grace provides an extreme amount of graphical flexibility, allowing an unlimited number of graphs, an unlimited number of curves on a graph, and a highly customizable set of symbols, markers, and colors. Grace&#x2019;s annotation capabilities and export formats allow the production of publication quality output.&lt;br/&gt;&lt;br/&gt;While Grace&#x2019;s scripting language is extremely powerful, it expects data to be read in from a file. Python has a much more natural environment for the creation and manipulation of data objects. With pygrace&#x2019;s bindings to the Grace scripting language, data objects can be easily created in python and then passed to a Grace session for plotting. Pygrace also includes methods for manipulating Grace plots directly from python.</description>
      <iweb:image href="Media/object144.jpg"></iweb:image>
      <iweb:comment link="http://www.cacr.caltech.edu/%7Emmckerns/Mike_McKerns/Software/Entries/2010/7/30_M._McKerns,_pygrace__python_bindings_to_Grace_2-D_plotting,_http___www.cacr.caltech.edu_projects_danse_pygrace.html.html#comment_layer" count="0" enabled="0"></iweb:comment>
    </item>
    <iweb:dateFormat>MMMM d, yyyy</iweb:dateFormat>
    <iweb:baseURL>http://www.cacr.caltech.edu/~mmckerns/Mike_McKerns/Software</iweb:baseURL>
    <iweb:maximumSummaryItems>10</iweb:maximumSummaryItems>
  </channel>
</rss>
