Index: mystic-0.1a1/setup.py
===================================================================
--- mystic-0.1a1/setup.py	(revision 133)
+++ mystic-0.1a1/setup.py	(working copy)
@@ -42,6 +42,7 @@
 
 # close 'setup' call
 setup_code += """    
+      zip_safe=True,
       scripts=[])
 """
 
@@ -51,7 +52,7 @@
 # if dependencies are missing, print a warning
 try:
     import numpy
-    import matplotlib
+    #import matplotlib #XXX: has issues being zip_safe
 except ImportError:
     print "\n***********************************************************"
     print "WARNING: One of the following dependencies is unresolved:"
Index: mystic-0.1a1/mystic/scipy_optimize.py
===================================================================
--- mystic-0.1a1/mystic/scipy_optimize.py	(revision 133)
+++ mystic-0.1a1/mystic/scipy_optimize.py	(working copy)
@@ -230,7 +230,7 @@
         iterations = 1
 
         while (fcalls[0] < self._maxfun and iterations < self._maxiter):
-            StepMonitor(sim, fsim) # get all values; "best" is sim[0]
+            StepMonitor(sim[0], fsim[0]) # sim = all values; "best" is sim[0]
             if self._EARLYEXIT or termination(self):
                 break
 
@@ -400,8 +400,8 @@
     iterations = len(stepmon.x)
     allvecs = []
     for i in range(iterations):
-       #allvecs.append(list(stepmon.x[i][0]))
-        allvecs.append(stepmon.x[i][0])
+       #allvecs.append(list(stepmon.x[i]))
+        allvecs.append(stepmon.x[i])
 
     if fcalls >= solver._maxfun:
         warnflag = 1
Index: mystic-0.1a1/examples/example10.py
===================================================================
--- mystic-0.1a1/examples/example10.py	(revision 133)
+++ mystic-0.1a1/examples/example10.py	(working copy)
@@ -31,7 +31,7 @@
 # draw the plot
 def plot_frame(label=None):
     pylab.close()
-    pylab.suptitle("8th-order Chebyshev coefficient convergence")
+    pylab.title("8th-order Chebyshev coefficient convergence")
     pylab.xlabel("Differential Evolution %s" % label)
     pylab.ylabel("Chi-Squared")
     return
Index: mystic-0.1a1/examples/example02.py
===================================================================
--- mystic-0.1a1/examples/example02.py	(revision 133)
+++ mystic-0.1a1/examples/example02.py	(working copy)
@@ -42,7 +42,7 @@
     pylab.plot([solution[0]],[rosen(solution)],'bo')
 
     # draw the plot
-    pylab.suptitle("minimium of Rosenbrock's function")
+    pylab.title("minimium of Rosenbrock's function")
     pylab.xlabel("x, y, z")
     pylab.ylabel("f(i) = Rosenbrock's function")
     pylab.legend(["f(x,1,1)","f(1,y,1)","f(1,1,z)"])
Index: mystic-0.1a1/examples/example12.py
===================================================================
--- mystic-0.1a1/examples/example12.py	(revision 133)
+++ mystic-0.1a1/examples/example12.py	(working copy)
@@ -55,7 +55,7 @@
 # draw the plot
 def plot_frame(label=None):
     pylab.close()
-    pylab.suptitle("fitting noisy 5th-order polynomial coefficients")
+    pylab.title("fitting noisy 5th-order polynomial coefficients")
     pylab.xlabel("x")
     pylab.ylabel("f(x)")
     return
Index: mystic-0.1a1/examples/example04.py
===================================================================
--- mystic-0.1a1/examples/example04.py	(revision 133)
+++ mystic-0.1a1/examples/example04.py	(working copy)
@@ -25,7 +25,7 @@
 
 # draw the plot
 def plot_frame():
-    pylab.suptitle("Rosenbrock parameter convergence")
+    pylab.title("Rosenbrock parameter convergence")
     pylab.xlabel("Nelder-Mead solver iterations")
     pylab.ylabel("parameter value")
     return
Index: mystic-0.1a1/examples/example06.py
===================================================================
--- mystic-0.1a1/examples/example06.py	(revision 133)
+++ mystic-0.1a1/examples/example06.py	(working copy)
@@ -24,7 +24,7 @@
 
 # draw the plot
 def plot_exact():
-    pylab.suptitle("fitting 8th-order Chebyshev polynomial coefficients")
+    pylab.title("fitting 8th-order Chebyshev polynomial coefficients")
     pylab.xlabel("x")
     pylab.ylabel("f(x)")
     import numpy
Index: mystic-0.1a1/examples/example08.py
===================================================================
--- mystic-0.1a1/examples/example08.py	(revision 133)
+++ mystic-0.1a1/examples/example08.py	(working copy)
@@ -30,7 +30,7 @@
 
 # draw the plot
 def plot_exact():
-    pylab.suptitle("fitting 8th-order Chebyshev polynomial coefficients")
+    pylab.title("fitting 8th-order Chebyshev polynomial coefficients")
     pylab.xlabel("x")
     pylab.ylabel("f(x)")
     import numpy
Index: mystic-0.1a1/examples/example11.py
===================================================================
--- mystic-0.1a1/examples/example11.py	(revision 133)
+++ mystic-0.1a1/examples/example11.py	(working copy)
@@ -31,7 +31,7 @@
 # draw the plot
 def plot_frame(label=None):
     pylab.close()
-    pylab.suptitle("8th-order Chebyshev coefficient convergence")
+    pylab.title("8th-order Chebyshev coefficient convergence")
     pylab.xlabel("Nelder-Mead Simplex Solver %s" % label)
     pylab.ylabel("Chi-Squared")
     return
@@ -39,19 +39,14 @@
 # plot the polynomial trajectories
 def plot_params(monitor):
     x = range(len(monitor.y))
-    import numpy
-    # NOTE: workaround poor design, where simplex is logged by StepMonitor
-    if isinstance(monitor.y[0],numpy.ndarray):
-        y = [i[0] for i in monitor.y]
-    else:
-        y = monitor.y
+    y = monitor.y
     pylab.plot(x,y,'b-')
     pylab.axis([1,0.5*x[-1],0,y[1]],'k-')
     return
 
 # draw the plot
 def plot_exact():
-    pylab.suptitle("fitting 8th-order Chebyshev polynomial coefficients")
+    pylab.title("fitting 8th-order Chebyshev polynomial coefficients")
     pylab.xlabel("x")
     pylab.ylabel("f(x)")
     import numpy
Index: mystic-0.1a1/examples/example03.py
===================================================================
--- mystic-0.1a1/examples/example03.py	(revision 133)
+++ mystic-0.1a1/examples/example03.py	(working copy)
@@ -36,7 +36,7 @@
     pylab.plot([i[2] for i in allvecs])
 
     # draw the plot
-    pylab.suptitle("Rosenbrock parameter convergence")
+    pylab.title("Rosenbrock parameter convergence")
     pylab.xlabel("Nelder-Mead solver iterations")
     pylab.ylabel("parameter value")
     pylab.legend(["x", "y", "z"])
Index: mystic-0.1a1/examples/example07.py
===================================================================
--- mystic-0.1a1/examples/example07.py	(revision 133)
+++ mystic-0.1a1/examples/example07.py	(working copy)
@@ -25,7 +25,7 @@
 
 # draw the plot
 def plot_exact():
-    pylab.suptitle("fitting 8th-order Chebyshev polynomial coefficients")
+    pylab.title("fitting 8th-order Chebyshev polynomial coefficients")
     pylab.xlabel("x")
     pylab.ylabel("f(x)")
     import numpy
Index: mystic-0.1a1/examples/example09.py
===================================================================
--- mystic-0.1a1/examples/example09.py	(revision 133)
+++ mystic-0.1a1/examples/example09.py	(working copy)
@@ -32,7 +32,7 @@
 
 # draw the plot
 def plot_exact():
-    pylab.suptitle("fitting 8th-order Chebyshev polynomial coefficients")
+    pylab.title("fitting 8th-order Chebyshev polynomial coefficients")
     pylab.xlabel("x")
     pylab.ylabel("f(x)")
     import numpy
Index: mystic-0.1a1/examples/README
===================================================================
--- mystic-0.1a1/examples/README	(revision 133)
+++ mystic-0.1a1/examples/README	(working copy)
@@ -1,7 +1,10 @@
 == Notes on mystic examples ==
+NOTE: for all examples that use matplotlib, please use the TKAgg backend.
+Thus, run the examples like this:  "python example04.py -dTKAgg"
+(see ticket #36 for more details).
 
 Dependencies:
- - All examples with prefix "example" should run without new dependencies, and are intended as a tutorial. (i.e. TRY THESE FIRST)
+ - All examples with prefix "example" should run without new dependencies, and are intended as a tutorial (i.e. TRY THESE FIRST).
  - All examples with prefix "test_" should run without new dependencies.
  - All examples with prefix "gplot_" requres gnuplot-py to be installed.
 
