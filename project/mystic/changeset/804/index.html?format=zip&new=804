<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
  
  

  


  
<!-- Mirrored from trac.mystic.cacr.caltech.edu/project/mystic/changeset/804/ by HTTrack Website Copier/3.x [XR&CO'2014], Wed, 18 May 2016 23:24:43 GMT -->
<!-- Added by HTTrack --><meta http-equiv="content-type" content="text/html;charset=utf-8" /><!-- /Added by HTTrack -->
<head>
    <title>
      Changeset 804 – Mystic
    </title>
    <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <link rel="search" href="../../search.html" />
        <link rel="prev" href="../803.html" title="Changeset 803" />
        <link rel="last" href="../862.html" title="Changeset 862" />
        <link rel="help" href="../../wiki/TracGuide.html" />
        <link rel="alternate" href="http://trac.mystic.cacr.caltech.edu/project/mystic/changeset/804/?format=diff&amp;new=804" type="text/plain" class="diff" title="Unified Diff" /><link rel="alternate" href="http://trac.mystic.cacr.caltech.edu/project/mystic/changeset/804/?format=zip&amp;new=804" type="application/zip" class="zip" title="Zip Archive" />
        <link rel="next" href="../805.html" title="Changeset 805" />
        <link rel="start" href="../../wiki.html" />
        <link rel="stylesheet" href="../../chrome/common/css/trac.css" type="text/css" /><link rel="stylesheet" href="../../chrome/common/css/changeset.css" type="text/css" /><link rel="stylesheet" href="../../chrome/common/css/diff.css" type="text/css" /><link rel="stylesheet" href="../../chrome/common/css/code.css" type="text/css" />
        <link rel="first" href="../1.html" title="Changeset 1" />
        <link rel="shortcut icon" href="http://trac.mystic.cacr.caltech.edu/mystic_icon.ico?" />
        <link rel="icon" href="http://trac.mystic.cacr.caltech.edu/mystic_icon.ico?" />
      <link type="application/opensearchdescription+xml" rel="search" href="../../search/opensearch" title="Search Mystic" />
    <script type="text/javascript" src="../../chrome/common/js/jquery.js"></script><script type="text/javascript" src="../../chrome/common/js/babel.js"></script><script type="text/javascript" src="../../chrome/common/js/trac.js"></script><script type="text/javascript" src="../../chrome/common/js/search.js"></script><script type="text/javascript" src="../../chrome/common/js/diff.js"></script>
    <!--[if lt IE 7]>
    <script type="text/javascript" src="/project/mystic/chrome/common/js/ie_pre7_hacks.js"></script>
    <![endif]-->
    <script type="text/javascript">
      jQuery(document).ready(function($) {
        $(".trac-toggledeleted").show().click(function() {
                  $(this).siblings().find(".trac-deleted").toggle();
                  return false;
        }).click();
        $("#content").find("li.entry h2 a").parent().addAnchor(_("Link to this diff"));
      });
    </script>
    <link rel="stylesheet" type="text/css" href="../../chrome/site/style.css" />
  </head>
  <body>
    <div id="siteheader">
    </div>
    <div id="banner">
      <div id="header">
        <a id="logo" href="http://trac.mystic.cacr.caltech.edu/"><img src="http://www.cacr.caltech.edu/projects/mystic/mystic_banner.png" alt="MYSTIC" height="150" width="400" /></a>
      </div>
      <form id="search" action="http://trac.mystic.cacr.caltech.edu/project/mystic/search" method="get">
        <div>
          <label for="proj-search">Search:</label>
          <input type="text" id="proj-search" name="q" size="18" value="" />
          <input type="submit" value="Search" />
        </div>
      </form>
      <div id="metanav" class="nav">
    <ul>
      <li class="first"><a href="../../login.html">Login</a></li><li><a href="../../wiki/TracGuide.html">Help/Guide</a></li><li><a href="../../about.html">About Trac</a></li><li class="last"><a href="../../prefs.html">Preferences</a></li>
    </ul>
  </div>
    </div>
    <div id="mainnav" class="nav">
    <ul>
      <li class="first"><a href="../../wiki.html">Wiki</a></li><li><a href="../../timeline.html">Timeline</a></li><li><a href="../../roadmap.html">Roadmap</a></li><li class="active"><a href="../../browser.html">Browse Source</a></li><li><a href="../../query.html">View Tickets</a></li><li class="last"><a href="../../search.html">Search</a></li>
    </ul>
  </div>
    <div id="main">
      <div id="ctxtnav" class="nav">
        <h2>Context Navigation</h2>
          <ul>
              <li class="first"><span>&larr; <a class="prev" href="../803.html" title="Changeset 803">Previous Changeset</a></span></li><li class="last"><span><a class="next" href="../805.html" title="Changeset 805">Next Changeset</a> &rarr;</span></li>
          </ul>
        <hr />
      </div>
    <div id="content" class="changeset">
      <div id="title">
            <h1>Changeset 804</h1>
      </div>
      <form id="prefs" action="#">
        <div>
          
  <label for="style">View differences</label>
  <select id="style" name="style">
    <option selected="selected" value="inline">inline</option>
    <option value="sidebyside">side by side</option>
  </select>
  <div class="field">
    <label><input type="radio" name="contextall" value="0" checked="checked" />
             Show</label>
      <label><input type="text" name="contextlines" id="contextlines" size="2" maxlength="3" value="2" />
             lines around each change</label><br />
    <label><input type="radio" name="contextall" value="1" />
           Show the changes in full context</label>
  </div>
  <fieldset id="ignore">
    <legend>Ignore:</legend>
    <div class="field">
      <input type="checkbox" id="ignoreblanklines" name="ignoreblanklines" />
      <label for="ignoreblanklines">Blank lines</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorecase" name="ignorecase" />
      <label for="ignorecase">Case changes</label>
    </div>
    <div class="field">
      <input type="checkbox" id="ignorewhitespace" name="ignorewhitespace" />
      <label for="ignorewhitespace">White space changes</label>
    </div>
  </fieldset>
  <div class="buttons">
    <input type="submit" name="update" value="Update" />
  </div>

        </div>
      </form>
      <dl id="overview">
          <dt class="property time">Timestamp:</dt>
          <dd class="time">
             07/16/15 16:36:54
             (<a class="timeline" href="http://trac.mystic.cacr.caltech.edu/project/mystic/timeline?from=2015-07-16T16%3A36%3A54-07%3A00&amp;precision=second" title="2015-07-16T16:36:54-07:00 in Timeline">10 months</a> ago)
          </dd>
          <dt class="property author">Author:</dt>
          <dd class="author">mmckerns</dd>
          <dt class="property message">Message:</dt>
          <dd class="message searchable">
            
            
              <p>
add model_plotter as a callable function<br />
</p>

            
            
          </dd>
          <dt class="property location">Location:</dt>
          <dd class="searchable"><a href="http://trac.mystic.cacr.caltech.edu/project/mystic/browser/mystic?rev=804">mystic</a></dd>
        <dt class="property files">
          Files:
        </dt>
        <dd class="files">
          <div class="legend" id="file-legend">
            <dl>
              <dt class="add"></dt><dd>1 added</dd>
              <dt class="mod"></dt><dd>1 edited</dd>
            </dl>
          </div>
          <br />
          <ul>
            <li>
          <div class="add"> </div>
            <a title="Show entry in browser" href="http://trac.mystic.cacr.caltech.edu/project/mystic/browser/mystic/mystic/model_plotter.py?rev=804">
              mystic/model_plotter.py
            </a>
          <span class="comment">(added)</span>
            </li><li>
          <div class="mod"> </div>
            <a title="Show entry in browser" href="http://trac.mystic.cacr.caltech.edu/project/mystic/browser/mystic/scripts/mystic_model_plotter.py?rev=804">
              scripts/mystic_model_plotter.py
            </a>
          <span class="comment">(modified)</span>
              (<a title="Show differences" href="#file1">1 diff</a>)
            </li>
          </ul>
        </dd>
      </dl>
      <div class="diff">
        <div class="legend" id="diff-legend">
          <h3>Legend:</h3>
          <dl>
            <dt class="unmod"></dt><dd>Unmodified</dd>
            <dt class="add"></dt><dd>Added</dd>
            <dt class="rem"></dt><dd>Removed</dd>
          </dl>
        </div>
        <div class="diff">
  <ul class="entries">
      <li class="entry">
        <h2 id="file1">
          <a href="mystic/scripts/mystic_model_plotter.html" title="Show the changeset 804 restricted to mystic/scripts/mystic_model_plotter.py">mystic/scripts/mystic_model_plotter.py</a>
        </h2>
        <table class="trac-diff inline" summary="Differences" cellspacing="0">
              <colgroup><col class="lineno" /><col class="lineno" /><col class="content" /></colgroup>
              <thead>
                <tr>
                  <th title="Revision 790">
                    <a title="Show revision 790 of this file in browser" href="http://trac.mystic.cacr.caltech.edu/project/mystic/browser/mystic/scripts/mystic_model_plotter.py?rev=790#L2">
                      r790</a>
                  </th>
                  <th title="Revision 804">
                    <a title="Show revision 804 of this file in browser" href="http://trac.mystic.cacr.caltech.edu/project/mystic/browser/mystic/scripts/mystic_model_plotter.py?rev=804#L2">
                      r804</a>
                  </th>
                  <td> </td>
                </tr>
              </thead>
            <tbody class="unmod">
                  <tr>
                          <th>2</th><th>2</th><td class="l"><span>#</span> </td>
                  </tr><tr>
                          <th>3</th><th>3</th><td class="l"><span># Author: Mike McKerns (mmckerns @caltech and @uqfoundation)</span> </td>
                  </tr>
            </tbody><tbody class="add">
                  <tr class="last first">
                          <th> </th><th>4</th><td class="r"><ins># Author: Jean-Christophe Fillion-Robin (jchris.fillionr @kitware.com)</ins> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>4</th><th>5</th><td class="l"><span># Copyright (c) 1997-2015 California Institute of Technology.</span> </td>
                  </tr><tr>
                          <th>5</th><th>6</th><td class="l"><span># License: 3-clause BSD.&nbsp; The full license text is available at:</span> </td>
                  </tr><tr>
                          <th>6</th><th>7</th><td class="l"><span>#&nbsp; - http://trac.mystic.cacr.caltech.edu/project/mystic/browser/mystic/LICENSE</span> </td>
                  </tr><tr>
                          <th>7</th><th>8</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>8</th><th> </th><td class="l"><span>__doc__ = """</span> </td>
                      </tr><tr>
                        <th>9</th><th> </th><td class="l"><span>mystic_model_plotter.py [options] model (filename)</span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>9</th><td class="r"><span>from mystic.model_plotter import model_plotter</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>10</th><th>10</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>11</th><th> </th><td class="l"><span>generate surface contour plots for model, specified by full import path</span> </td>
                      </tr><tr>
                        <th>12</th><th> </th><td class="l"><span>generate model trajectory from logfile (or solver restart file), if provided</span> </td>
                      </tr><tr>
                        <th>13</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>14</th><th> </th><td class="l"><span>The option "bounds" takes an indicator string, where the bounds should</span> </td>
                      </tr><tr>
                        <th>15</th><th> </th><td class="l"><span>be given as comma-separated slices. For example, using bounds = "-1:10, 0:20"</span> </td>
                      </tr><tr>
                        <th>16</th><th> </th><td class="l"><span>will set the lower and upper bounds for x to be (-1,10) and y to be (0,20).</span> </td>
                      </tr><tr>
                        <th>17</th><th> </th><td class="l"><span>The "step" can also be given, to control the number of lines plotted in the</span> </td>
                      </tr><tr>
                        <th>18</th><th> </th><td class="l"><span>grid. Thus "-1:10:.1, 0:20" would set the bounds as above, but use increments</span> </td>
                      </tr><tr>
                        <th>19</th><th> </th><td class="l"><span>of .1 along x and the default step along y.&nbsp; For models with &gt; 2D, the bounds</span> </td>
                      </tr><tr>
                        <th>20</th><th> </th><td class="l"><span>can be used to specify 2 dimensions plus fixed values for remaining dimensions.</span> </td>
                      </tr><tr>
                        <th>21</th><th> </th><td class="l"><span>Thus, "-1:10, 0:20, 1.0" would plot the 2D surface where the z-axis was fixed</span> </td>
                      </tr><tr>
                        <th>22</th><th> </th><td class="l"><span>at z=1.0.</span> </td>
                      </tr><tr>
                        <th>23</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>24</th><th> </th><td class="l"><span>The option "label" takes comma-separated strings. For example, label = "x,y,"</span> </td>
                      </tr><tr>
                        <th>25</th><th> </th><td class="l"><span>will place 'x' on the x-axis, 'y' on the y-axis, and nothing on the z-axis.</span> </td>
                      </tr><tr>
                        <th>26</th><th> </th><td class="l"><span>LaTeX is also accepted. For example, label = "$ h $, $ {\\alpha}$, $ v$" will</span> </td>
                      </tr><tr>
                        <th>27</th><th> </th><td class="l"><span>label the axes with standard LaTeX math formatting. Note that the leading</span> </td>
                      </tr><tr>
                        <th>28</th><th> </th><td class="l"><span>space is required, while a trailing space aligns the text with the axis</span> </td>
                      </tr><tr>
                        <th>29</th><th> </th><td class="l"><span>instead of the plot frame.</span> </td>
                      </tr><tr>
                        <th>30</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>31</th><th> </th><td class="l"><span>The option "reduce" can be given to reduce the output of a model to a scalar,</span> </td>
                      </tr><tr>
                        <th>32</th><th> </th><td class="l"><span>thus converting 'model(params)' to 'reduce(model(params))'. A reducer is given</span> </td>
                      </tr><tr>
                        <th>33</th><th> </th><td class="l"><span>by the import path (e.g. 'numpy.add'). The option "scale" will convert the plot</span> </td>
                      </tr><tr>
                        <th>34</th><th> </th><td class="l"><span>to log-scale, and scale the cost by 'z=log(4*z*scale+1)+2'. This is useful for</span> </td>
                      </tr><tr>
                        <th>35</th><th> </th><td class="l"><span>visualizing small contour changes around the minimium. If using log-scale</span> </td>
                      </tr><tr>
                        <th>36</th><th> </th><td class="l"><span>produces negative numbers, the option "shift" can be used to shift the cost</span> </td>
                      </tr><tr>
                        <th>37</th><th> </th><td class="l"><span>by 'z=z+shift'. Both shift and scale are intended to help visualize contours.</span> </td>
                      </tr><tr>
                        <th>38</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>39</th><th> </th><td class="l"><span>Required Inputs:</span> </td>
                      </tr><tr>
                        <th>40</th><th> </th><td class="l"><span>&nbsp; model&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;full import path for the model (e.g. mystic.models.rosen)</span> </td>
                      </tr><tr>
                        <th>41</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>42</th><th> </th><td class="l"><span>Additional Inputs:</span> </td>
                      </tr><tr>
                        <th>43</th><th> </th><td class="l"><span>&nbsp; filename&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; name of the convergence logfile (e.g. log.txt)</span> </td>
                      </tr><tr>
                        <th>44</th><th> </th><td class="l"><span>"""</span> </td>
                      </tr><tr>
                        <th>45</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>46</th><th> </th><td class="l"><span>from mpl_toolkits.mplot3d import axes3d</span> </td>
                      </tr><tr>
                        <th>47</th><th> </th><td class="l"><span>import matplotlib.pyplot as plt</span> </td>
                      </tr><tr>
                        <th>48</th><th> </th><td class="l"><span>from matplotlib import cm</span> </td>
                      </tr><tr>
                        <th>49</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>50</th><th> </th><td class="l"><span>from mystic.munge import read_history</span> </td>
                      </tr><tr>
                        <th>51</th><th> </th><td class="l"><span>from mystic.munge import logfile_reader, raw_to_support</span> </td>
                      </tr><tr>
                        <th>52</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>53</th><th> </th><td class="l"><span>#XXX: better if reads single id only? (e.g. same interface as read_history)</span> </td>
                      </tr><tr>
                        <th>54</th><th> </th><td class="l"><span>def get_history(source, ids=None):</span> </td>
                      </tr><tr>
                        <th>55</th><th> </th><td class="l"><span>&nbsp; &nbsp; """get params and cost from the given source</span> </td>
                      </tr><tr>
                        <th>56</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>57</th><th> </th><td class="l"><span>source is the name of the trajectory logfile (or solver instance)</span> </td>
                      </tr><tr>
                        <th>58</th><th> </th><td class="l"><span>if provided, ids are the list of 'run ids' to select</span> </td>
                      </tr><tr>
                        <th>59</th><th> </th><td class="l"><span>&nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th>60</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # if it's a logfile, it might be multi-id</span> </td>
                      </tr><tr>
                        <th>61</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; step, param, cost = logfile_reader(source)</span> </td>
                      </tr><tr>
                        <th>62</th><th> </th><td class="l"><span>&nbsp; &nbsp; except: # it's not a logfile, so read and return</span> </td>
                      </tr><tr>
                        <th>63</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; param, cost = read_history(source)</span> </td>
                      </tr><tr>
                        <th>64</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; return [param],[cost]</span> </td>
                      </tr><tr>
                        <th>65</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>66</th><th> </th><td class="l"><span>&nbsp; &nbsp; # split (i,id) into iteration and id</span> </td>
                      </tr><tr>
                        <th>67</th><th> </th><td class="l"><span>&nbsp; &nbsp; multinode = len(step[0]) - 1&nbsp; #XXX: what if step = []?</span> </td>
                      </tr><tr>
                        <th>68</th><th> </th><td class="l"><span>&nbsp; &nbsp; if multinode: id = [i[1] for i in step]</span> </td>
                      </tr><tr>
                        <th>69</th><th> </th><td class="l"><span>&nbsp; &nbsp; else: id = [0 for i in step]</span> </td>
                      </tr><tr>
                        <th>70</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>71</th><th> </th><td class="l"><span>&nbsp; &nbsp; params = [[] for i in range(max(id) + 1)]</span> </td>
                      </tr><tr>
                        <th>72</th><th> </th><td class="l"><span>&nbsp; &nbsp; costs = [[] for i in range(len(params))]</span> </td>
                      </tr><tr>
                        <th>73</th><th> </th><td class="l"><span>&nbsp; &nbsp; # populate params for each id with the corresponding (param,cost)</span> </td>
                      </tr><tr>
                        <th>74</th><th> </th><td class="l"><span>&nbsp; &nbsp; for i in range(len(id)):</span> </td>
                      </tr><tr>
                        <th>75</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if ids is None or id[i] in ids: # take only the selected 'id'</span> </td>
                      </tr><tr>
                        <th>76</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; params[id[i]].append(param[i])</span> </td>
                      </tr><tr>
                        <th>77</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; costs[id[i]].append(cost[i])</span> </td>
                      </tr><tr>
                        <th>78</th><th> </th><td class="l"><span>&nbsp; &nbsp; params = [r for r in params if len(r)] # only keep selected 'ids'</span> </td>
                      </tr><tr>
                        <th>79</th><th> </th><td class="l"><span>&nbsp; &nbsp; costs = [r for r in costs if len(r)] # only keep selected 'ids'</span> </td>
                      </tr><tr>
                        <th>80</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>81</th><th> </th><td class="l"><span>&nbsp; &nbsp; # convert to support format</span> </td>
                      </tr><tr>
                        <th>82</th><th> </th><td class="l"><span>&nbsp; &nbsp; for i in range(len(params)):</span> </td>
                      </tr><tr>
                        <th>83</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; params[i], costs[i] = raw_to_support(params[i], costs[i])</span> </td>
                      </tr><tr>
                        <th>84</th><th> </th><td class="l"><span>&nbsp; &nbsp; return params, costs</span> </td>
                      </tr><tr>
                        <th>85</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>86</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>87</th><th> </th><td class="l"><span>def get_instance(location, *args, **kwds):</span> </td>
                      </tr><tr>
                        <th>88</th><th> </th><td class="l"><span>&nbsp; &nbsp; """given the import location of a model or model class, return the model</span> </td>
                      </tr><tr>
                        <th>89</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>90</th><th> </th><td class="l"><span>args and kwds will be passed to the constructor of the model class</span> </td>
                      </tr><tr>
                        <th>91</th><th> </th><td class="l"><span>&nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th>92</th><th> </th><td class="l"><span>&nbsp; &nbsp; package, target = location.rsplit('.',1)</span> </td>
                      </tr><tr>
                        <th>93</th><th> </th><td class="l"><span>&nbsp; &nbsp; exec "from %s import %s as model" % (package, target)</span> </td>
                      </tr><tr>
                        <th>94</th><th> </th><td class="l"><span>&nbsp; &nbsp; import inspect</span> </td>
                      </tr><tr>
                        <th>95</th><th> </th><td class="l"><span>&nbsp; &nbsp; if inspect.isclass(model):</span> </td>
                      </tr><tr>
                        <th>96</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; model = model(*args, **kwds)</span> </td>
                      </tr><tr>
                        <th>97</th><th> </th><td class="l"><span>&nbsp; &nbsp; return model</span> </td>
                      </tr><tr>
                        <th>98</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>99</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>100</th><th> </th><td class="l"><span>def parse_input(option):</span> </td>
                      </tr><tr>
                        <th>101</th><th> </th><td class="l"><span>&nbsp; &nbsp; """parse 'option' string into 'select', 'axes', and 'mask'</span> </td>
                      </tr><tr>
                        <th>102</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>103</th><th> </th><td class="l"><span>select contains the dimension specifications on which to plot</span> </td>
                      </tr><tr>
                        <th>104</th><th> </th><td class="l"><span>axes holds the indicies of the parameters selected to plot</span> </td>
                      </tr><tr>
                        <th>105</th><th> </th><td class="l"><span>mask is a dictionary of the parameter indicies and fixed values</span> </td>
                      </tr><tr>
                        <th>106</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>107</th><th> </th><td class="l"><span>For example,</span> </td>
                      </tr><tr>
                        <th>108</th><th> </th><td class="l"><span>&nbsp; &nbsp; &gt;&gt;&gt; select, axes, mask = parse_input("-1:10:.1, 0.0, 5.0, -50:50:.5")</span> </td>
                      </tr><tr>
                        <th>109</th><th> </th><td class="l"><span>&nbsp; &nbsp; &gt;&gt;&gt; select</span> </td>
                      </tr><tr>
                        <th>110</th><th> </th><td class="l"><span>&nbsp; &nbsp; [0, 3]</span> </td>
                      </tr><tr>
                        <th>111</th><th> </th><td class="l"><span>&nbsp; &nbsp; &gt;&gt;&gt; axes</span> </td>
                      </tr><tr>
                        <th>112</th><th> </th><td class="l"><span>&nbsp; &nbsp; "-1:10:.1, -50:50:.5"</span> </td>
                      </tr><tr>
                        <th>113</th><th> </th><td class="l"><span>&nbsp; &nbsp; &gt;&gt;&gt; mask</span> </td>
                      </tr><tr>
                        <th>114</th><th> </th><td class="l"><span>&nbsp; &nbsp; {1: 0.0, 2: 5.0}</span> </td>
                      </tr><tr>
                        <th>115</th><th> </th><td class="l"><span>&nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th>116</th><th> </th><td class="l"><span>&nbsp; &nbsp; option = option.split(',')</span> </td>
                      </tr><tr>
                        <th>117</th><th> </th><td class="l"><span>&nbsp; &nbsp; select = []</span> </td>
                      </tr><tr>
                        <th>118</th><th> </th><td class="l"><span>&nbsp; &nbsp; axes = []</span> </td>
                      </tr><tr>
                        <th>119</th><th> </th><td class="l"><span>&nbsp; &nbsp; mask = {}</span> </td>
                      </tr><tr>
                        <th>120</th><th> </th><td class="l"><span>&nbsp; &nbsp; for index,value in enumerate(option):</span> </td>
                      </tr><tr>
                        <th>121</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if ":" in value:</span> </td>
                      </tr><tr>
                        <th>122</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; select.append(index)</span> </td>
                      </tr><tr>
                        <th>123</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; axes.append(value)</span> </td>
                      </tr><tr>
                        <th>124</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; else:</span> </td>
                      </tr><tr>
                        <th>125</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; mask.update({index:float(value)})</span> </td>
                      </tr><tr>
                        <th>126</th><th> </th><td class="l"><span>&nbsp; &nbsp; axes = ','.join(axes)</span> </td>
                      </tr><tr>
                        <th>127</th><th> </th><td class="l"><span>&nbsp; &nbsp; return select, axes, mask</span> </td>
                      </tr><tr>
                        <th>128</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>129</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>130</th><th> </th><td class="l"><span>def parse_axes(option, grid=True):</span> </td>
                      </tr><tr>
                        <th>131</th><th> </th><td class="l"><span>&nbsp; &nbsp; """parse option string into grid axes; using modified numpy.ogrid notation</span> </td>
                      </tr><tr>
                        <th>132</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>133</th><th> </th><td class="l"><span>For example:</span> </td>
                      </tr><tr>
                        <th>134</th><th> </th><td class="l"><span>&nbsp; option='-1:10:.1, 0:10:.1' yields x,y=ogrid[-1:10:.1,0:10:.1],</span> </td>
                      </tr><tr>
                        <th>135</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>136</th><th> </th><td class="l"><span>If grid is False, accept options suitable for line plotting.</span> </td>
                      </tr><tr>
                        <th>137</th><th> </th><td class="l"><span>For example:</span> </td>
                      </tr><tr>
                        <th>138</th><th> </th><td class="l"><span>&nbsp; option='-1:10' yields x=ogrid[-1:10] and y=0,</span> </td>
                      </tr><tr>
                        <th>139</th><th> </th><td class="l"><span>&nbsp; option='-1:10, 2' yields x=ogrid[-1:10] and y=2,</span> </td>
                      </tr><tr>
                        <th>140</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>141</th><th> </th><td class="l"><span>Returns tuple (x,y) with 'x,y' defined above.</span> </td>
                      </tr><tr>
                        <th>142</th><th> </th><td class="l"><span>&nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th>143</th><th> </th><td class="l"><span>&nbsp; &nbsp; import numpy</span> </td>
                      </tr><tr>
                        <th>144</th><th> </th><td class="l"><span>&nbsp; &nbsp; option = option.split(',')</span> </td>
                      </tr><tr>
                        <th>145</th><th> </th><td class="l"><span>&nbsp; &nbsp; opt = dict(zip(['x','y','z'],option))</span> </td>
                      </tr><tr>
                        <th>146</th><th> </th><td class="l"><span>&nbsp; &nbsp; if len(option) &gt; 2 or len(option) &lt; 1:</span> </td>
                      </tr><tr>
                        <th>147</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; raise ValueError("invalid format string: '%s'" % ','.join(option))</span> </td>
                      </tr><tr>
                        <th>148</th><th> </th><td class="l"><span>&nbsp; &nbsp; z = bool(grid)</span> </td>
                      </tr><tr>
                        <th>149</th><th> </th><td class="l"><span>&nbsp; &nbsp; if len(option) == 1: opt['y'] = '0'</span> </td>
                      </tr><tr>
                        <th>150</th><th> </th><td class="l"><span>&nbsp; &nbsp; xd = True if ':' in opt['x'] else False</span> </td>
                      </tr><tr>
                        <th>151</th><th> </th><td class="l"><span>&nbsp; &nbsp; yd = True if ':' in opt['y'] else False</span> </td>
                      </tr><tr>
                        <th>152</th><th> </th><td class="l"><span>&nbsp; &nbsp; #XXX: accepts option='3:1', '1:1', and '1:2:10' (try to catch?)</span> </td>
                      </tr><tr>
                        <th>153</th><th> </th><td class="l"><span>&nbsp; &nbsp; if xd and yd:</span> </td>
                      </tr><tr>
                        <th>154</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; try: # x,y form a 2D grid</span> </td>
                      </tr><tr>
                        <th>155</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exec('x,y = numpy.ogrid[%s,%s]' % (opt['x'],opt['y']))</span> </td>
                      </tr><tr>
                        <th>156</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; except: # AttributeError:</span> </td>
                      </tr><tr>
                        <th>157</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise ValueError("invalid format string: '%s'" % ','.join(option))</span> </td>
                      </tr><tr>
                        <th>158</th><th> </th><td class="l"><span>&nbsp; &nbsp; elif xd and not z:</span> </td>
                      </tr><tr>
                        <th>159</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; try:</span> </td>
                      </tr><tr>
                        <th>160</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exec('x = numpy.ogrid[%s]' % opt['x'])</span> </td>
                      </tr><tr>
                        <th>161</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; y = float(opt['y'])</span> </td>
                      </tr><tr>
                        <th>162</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; except: # (AttributeError, SyntaxError, ValueError):</span> </td>
                      </tr><tr>
                        <th>163</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise ValueError("invalid format string: '%s'" % ','.join(option))</span> </td>
                      </tr><tr>
                        <th>164</th><th> </th><td class="l"><span>&nbsp; &nbsp; elif yd and not z:</span> </td>
                      </tr><tr>
                        <th>165</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; try:</span> </td>
                      </tr><tr>
                        <th>166</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; x = float(opt['x'])</span> </td>
                      </tr><tr>
                        <th>167</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; exec('y = numpy.ogrid[%s]' % opt['y'])</span> </td>
                      </tr><tr>
                        <th>168</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; except: # (AttributeError, SyntaxError, ValueError):</span> </td>
                      </tr><tr>
                        <th>169</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise ValueError("invalid format string: '%s'" % ','.join(option))</span> </td>
                      </tr><tr>
                        <th>170</th><th> </th><td class="l"><span>&nbsp; &nbsp; else:</span> </td>
                      </tr><tr>
                        <th>171</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; raise ValueError("invalid format string: '%s'" % ','.join(option))</span> </td>
                      </tr><tr>
                        <th>172</th><th> </th><td class="l"><span>&nbsp; &nbsp; if not x.size or not y.size:</span> </td>
                      </tr><tr>
                        <th>173</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; raise ValueError("invalid format string: '%s'" % ','.join(option))</span> </td>
                      </tr><tr>
                        <th>174</th><th> </th><td class="l"><span>&nbsp; &nbsp; return x,y</span> </td>
                      </tr><tr>
                        <th>175</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>176</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>177</th><th> </th><td class="l"><span>def draw_projection(x, cost, scale=True, shift=False, style=None, figure=None):</span> </td>
                      </tr><tr>
                        <th>178</th><th> </th><td class="l"><span>&nbsp; &nbsp; """draw a solution trajectory (for overlay on a 1D plot)</span> </td>
                      </tr><tr>
                        <th>179</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>180</th><th> </th><td class="l"><span>x is the sequence of values for one parameter (i.e. a parameter trajectory)</span> </td>
                      </tr><tr>
                        <th>181</th><th> </th><td class="l"><span>cost is the sequence of costs (i.e. the solution trajectory)</span> </td>
                      </tr><tr>
                        <th>182</th><th> </th><td class="l"><span>if scale is provided, scale the intensity as 'z = log(4*z*scale+1)+2'</span> </td>
                      </tr><tr>
                        <th>183</th><th> </th><td class="l"><span>if shift is provided, shift the intensity as 'z = z+shift' (useful for -z's)</span> </td>
                      </tr><tr>
                        <th>184</th><th> </th><td class="l"><span>if style is provided, set the line style (e.g. 'w-o', 'k-', 'ro')</span> </td>
                      </tr><tr>
                        <th>185</th><th> </th><td class="l"><span>if figure is provided, plot to an existing figure</span> </td>
                      </tr><tr>
                        <th>186</th><th> </th><td class="l"><span>&nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th>187</th><th> </th><td class="l"><span>&nbsp; &nbsp; if not figure: figure = plt.figure()</span> </td>
                      </tr><tr>
                        <th>188</th><th> </th><td class="l"><span>&nbsp; &nbsp; ax = figure.gca()</span> </td>
                      </tr><tr>
                        <th>189</th><th> </th><td class="l"><span>&nbsp; &nbsp; ax.autoscale(tight=True)</span> </td>
                      </tr><tr>
                        <th>190</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>191</th><th> </th><td class="l"><span>&nbsp; &nbsp; if style in [None, False]:</span> </td>
                      </tr><tr>
                        <th>192</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; style = 'k-o'</span> </td>
                      </tr><tr>
                        <th>193</th><th> </th><td class="l"><span>&nbsp; &nbsp; import numpy</span> </td>
                      </tr><tr>
                        <th>194</th><th> </th><td class="l"><span>&nbsp; &nbsp; if shift: </span> </td>
                      </tr><tr>
                        <th>195</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if shift is True: #NOTE: MAY NOT be the exact minimum</span> </td>
                      </tr><tr>
                        <th>196</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; shift = max(-numpy.min(cost), 0.0) + 0.5 # a good guess</span> </td>
                      </tr><tr>
                        <th>197</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; cost = numpy.asarray(cost)+shift</span> </td>
                      </tr><tr>
                        <th>198</th><th> </th><td class="l"><span>&nbsp; &nbsp; cost = numpy.asarray(cost)</span> </td>
                      </tr><tr>
                        <th>199</th><th> </th><td class="l"><span>&nbsp; &nbsp; if scale:</span> </td>
                      </tr><tr>
                        <th>200</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; cost = numpy.log(4*cost*scale+1)+2</span> </td>
                      </tr><tr>
                        <th>201</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>202</th><th> </th><td class="l"><span>&nbsp; &nbsp; ax.plot(x,cost, style, linewidth=2, markersize=4)</span> </td>
                      </tr><tr>
                        <th>203</th><th> </th><td class="l"><span>&nbsp; &nbsp; #XXX: need to 'correct' the z-axis (or provide easy conversion)</span> </td>
                      </tr><tr>
                        <th>204</th><th> </th><td class="l"><span>&nbsp; &nbsp; return figure</span> </td>
                      </tr><tr>
                        <th>205</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>206</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>207</th><th> </th><td class="l"><span>def draw_trajectory(x, y, cost=None, scale=True, shift=False, style=None, figure=None):</span> </td>
                      </tr><tr>
                        <th>208</th><th> </th><td class="l"><span>&nbsp; &nbsp; """draw a solution trajectory (for overlay on a contour plot)</span> </td>
                      </tr><tr>
                        <th>209</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>210</th><th> </th><td class="l"><span>x is a sequence of values for one parameter (i.e. a parameter trajectory)</span> </td>
                      </tr><tr>
                        <th>211</th><th> </th><td class="l"><span>y is a sequence of values for one parameter (i.e. a parameter trajectory)</span> </td>
                      </tr><tr>
                        <th>212</th><th> </th><td class="l"><span>cost is the solution trajectory (i.e. costs); if provided, plot a 3D contour</span> </td>
                      </tr><tr>
                        <th>213</th><th> </th><td class="l"><span>if scale is provided, scale the intensity as 'z = log(4*z*scale+1)+2'</span> </td>
                      </tr><tr>
                        <th>214</th><th> </th><td class="l"><span>if shift is provided, shift the intensity as 'z = z+shift' (useful for -z's)</span> </td>
                      </tr><tr>
                        <th>215</th><th> </th><td class="l"><span>if style is provided, set the line style (e.g. 'w-o', 'k-', 'ro')</span> </td>
                      </tr><tr>
                        <th>216</th><th> </th><td class="l"><span>if figure is provided, plot to an existing figure</span> </td>
                      </tr><tr>
                        <th>217</th><th> </th><td class="l"><span>&nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th>218</th><th> </th><td class="l"><span>&nbsp; &nbsp; if not figure: figure = plt.figure()</span> </td>
                      </tr><tr>
                        <th>219</th><th> </th><td class="l"><span>&nbsp; &nbsp; </span> </td>
                      </tr><tr>
                        <th>220</th><th> </th><td class="l"><span>&nbsp; &nbsp; if cost: kwds = {'projection':'3d'} # 3D</span> </td>
                      </tr><tr>
                        <th>221</th><th> </th><td class="l"><span>&nbsp; &nbsp; else: kwds = {}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;# 2D</span> </td>
                      </tr><tr>
                        <th>222</th><th> </th><td class="l"><span>&nbsp; &nbsp; ax = figure.gca(**kwds)</span> </td>
                      </tr><tr>
                        <th>223</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>224</th><th> </th><td class="l"><span>&nbsp; &nbsp; if style in [None, False]:</span> </td>
                      </tr><tr>
                        <th>225</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; style = 'w-o' #if not scale else 'k-o'</span> </td>
                      </tr><tr>
                        <th>226</th><th> </th><td class="l"><span>&nbsp; &nbsp; if cost: # is 3D, cost is needed</span> </td>
                      </tr><tr>
                        <th>227</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; import numpy</span> </td>
                      </tr><tr>
                        <th>228</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if shift: </span> </td>
                      </tr><tr>
                        <th>229</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; if shift is True: #NOTE: MAY NOT be the exact minimum</span> </td>
                      </tr><tr>
                        <th>230</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; shift = max(-numpy.min(cost), 0.0) + 0.5 # a good guess</span> </td>
                      </tr><tr>
                        <th>231</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cost = numpy.asarray(cost)+shift</span> </td>
                      </tr><tr>
                        <th>232</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if scale:</span> </td>
                      </tr><tr>
                        <th>233</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cost = numpy.asarray(cost)</span> </td>
                      </tr><tr>
                        <th>234</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; cost = numpy.log(4*cost*scale+1)+2</span> </td>
                      </tr><tr>
                        <th>235</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ax.plot(x,y,cost, style, linewidth=2, markersize=4)</span> </td>
                      </tr><tr>
                        <th>236</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; #XXX: need to 'correct' the z-axis (or provide easy conversion)</span> </td>
                      </tr><tr>
                        <th>237</th><th> </th><td class="l"><span>&nbsp; &nbsp; else:&nbsp; &nbsp; # is 2D, cost not needed</span> </td>
                      </tr><tr>
                        <th>238</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ax.plot(x,y, style, linewidth=2, markersize=4)</span> </td>
                      </tr><tr>
                        <th>239</th><th> </th><td class="l"><span>&nbsp; &nbsp; return figure</span> </td>
                      </tr><tr>
                        <th>240</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>241</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>242</th><th> </th><td class="l"><span>def draw_slice(f, x, y=None, scale=True, shift=False):</span> </td>
                      </tr><tr>
                        <th>243</th><th> </th><td class="l"><span>&nbsp; &nbsp; """plot a slice of a 2D function 'f' in 1D</span> </td>
                      </tr><tr>
                        <th>244</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>245</th><th> </th><td class="l"><span>x is an array used to set up the axis</span> </td>
                      </tr><tr>
                        <th>246</th><th> </th><td class="l"><span>y is a fixed value for the 2nd axis</span> </td>
                      </tr><tr>
                        <th>247</th><th> </th><td class="l"><span>if scale is provided, scale the intensity as 'z = log(4*z*scale+1)+2'</span> </td>
                      </tr><tr>
                        <th>248</th><th> </th><td class="l"><span>if shift is provided, shift the intensity as 'z = z+shift' (useful for -z's)</span> </td>
                      </tr><tr>
                        <th>249</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>250</th><th> </th><td class="l"><span>NOTE: when plotting the 'y-axis' at fixed 'x',</span> </td>
                      </tr><tr>
                        <th>251</th><th> </th><td class="l"><span>pass the array to 'y' and the fixed value to 'x'</span> </td>
                      </tr><tr>
                        <th>252</th><th> </th><td class="l"><span>&nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th>253</th><th> </th><td class="l"><span>&nbsp; &nbsp; import numpy</span> </td>
                      </tr><tr>
                        <th>254</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>255</th><th> </th><td class="l"><span>&nbsp; &nbsp; if y is None:</span> </td>
                      </tr><tr>
                        <th>256</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; y = 0.0</span> </td>
                      </tr><tr>
                        <th>257</th><th> </th><td class="l"><span>&nbsp; &nbsp; x, y = numpy.meshgrid(x, y)</span> </td>
                      </tr><tr>
                        <th>258</th><th> </th><td class="l"><span>&nbsp; &nbsp; plotx = True if numpy.all(y == y[0,0]) else False</span> </td>
                      </tr><tr>
                        <th>259</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>260</th><th> </th><td class="l"><span>&nbsp; &nbsp; z = 0*x</span> </td>
                      </tr><tr>
                        <th>261</th><th> </th><td class="l"><span>&nbsp; &nbsp; s,t = x.shape</span> </td>
                      </tr><tr>
                        <th>262</th><th> </th><td class="l"><span>&nbsp; &nbsp; for i in range(s):</span> </td>
                      </tr><tr>
                        <th>263</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(t):</span> </td>
                      </tr><tr>
                        <th>264</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xx,yy = x[i,j], y[i,j]</span> </td>
                      </tr><tr>
                        <th>265</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; z[i,j] = f([xx,yy])</span> </td>
                      </tr><tr>
                        <th>266</th><th> </th><td class="l"><span>&nbsp; &nbsp; if shift:</span> </td>
                      </tr><tr>
                        <th>267</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if shift is True: shift = max(-numpy.min(z), 0.0) + 0.5 # exact minimum</span> </td>
                      </tr><tr>
                        <th>268</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; z = z+shift</span> </td>
                      </tr><tr>
                        <th>269</th><th> </th><td class="l"><span>&nbsp; &nbsp; if scale: z = numpy.log(4*z*scale+1)+2</span> </td>
                      </tr><tr>
                        <th>270</th><th> </th><td class="l"><span>&nbsp; &nbsp; #XXX: need to 'correct' the z-axis (or provide easy conversion)</span> </td>
                      </tr><tr>
                        <th>271</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>272</th><th> </th><td class="l"><span>&nbsp; &nbsp; fig = plt.figure()</span> </td>
                      </tr><tr>
                        <th>273</th><th> </th><td class="l"><span>&nbsp; &nbsp; ax = fig.gca()</span> </td>
                      </tr><tr>
                        <th>274</th><th> </th><td class="l"><span>&nbsp; &nbsp; ax.autoscale(tight=True)</span> </td>
                      </tr><tr>
                        <th>275</th><th> </th><td class="l"><span>&nbsp; &nbsp; if plotx:</span> </td>
                      </tr><tr>
                        <th>276</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ax.plot(x.reshape(-1), z.reshape(-1))</span> </td>
                      </tr><tr>
                        <th>277</th><th> </th><td class="l"><span>&nbsp; &nbsp; else:</span> </td>
                      </tr><tr>
                        <th>278</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ax.plot(y.reshape(-1), z.reshape(-1))</span> </td>
                      </tr><tr>
                        <th>279</th><th> </th><td class="l"><span>&nbsp; &nbsp; return fig</span> </td>
                      </tr><tr>
                        <th>280</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>281</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>282</th><th> </th><td class="l"><span>def draw_contour(f, x, y=None, surface=False, fill=True, scale=True, shift=False, density=5):</span> </td>
                      </tr><tr>
                        <th>283</th><th> </th><td class="l"><span>&nbsp; &nbsp; """draw a contour plot for a given 2D function 'f'</span> </td>
                      </tr><tr>
                        <th>284</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>285</th><th> </th><td class="l"><span>x and y are arrays used to set up a 2D mesh grid</span> </td>
                      </tr><tr>
                        <th>286</th><th> </th><td class="l"><span>if fill is True, color fill the contours</span> </td>
                      </tr><tr>
                        <th>287</th><th> </th><td class="l"><span>if surface is True, plot the contours as a 3D projection</span> </td>
                      </tr><tr>
                        <th>288</th><th> </th><td class="l"><span>if scale is provided, scale the intensity as 'z = log(4*z*scale+1)+2'</span> </td>
                      </tr><tr>
                        <th>289</th><th> </th><td class="l"><span>if shift is provided, shift the intensity as 'z = z+shift' (useful for -z's)</span> </td>
                      </tr><tr>
                        <th>290</th><th> </th><td class="l"><span>use density to adjust the number of contour lines</span> </td>
                      </tr><tr>
                        <th>291</th><th> </th><td class="l"><span>&nbsp; &nbsp; """</span> </td>
                      </tr><tr>
                        <th>292</th><th> </th><td class="l"><span>&nbsp; &nbsp; import numpy</span> </td>
                      </tr><tr>
                        <th>293</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>294</th><th> </th><td class="l"><span>&nbsp; &nbsp; if y is None:</span> </td>
                      </tr><tr>
                        <th>295</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; y = x</span> </td>
                      </tr><tr>
                        <th>296</th><th> </th><td class="l"><span>&nbsp; &nbsp; x, y = numpy.meshgrid(x, y)</span> </td>
                      </tr><tr>
                        <th>297</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>298</th><th> </th><td class="l"><span>&nbsp; &nbsp; z = 0*x</span> </td>
                      </tr><tr>
                        <th>299</th><th> </th><td class="l"><span>&nbsp; &nbsp; s,t = x.shape</span> </td>
                      </tr><tr>
                        <th>300</th><th> </th><td class="l"><span>&nbsp; &nbsp; for i in range(s):</span> </td>
                      </tr><tr>
                        <th>301</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; for j in range(t):</span> </td>
                      </tr><tr>
                        <th>302</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; xx,yy = x[i,j], y[i,j]</span> </td>
                      </tr><tr>
                        <th>303</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; z[i,j] = f([xx,yy])</span> </td>
                      </tr><tr>
                        <th>304</th><th> </th><td class="l"><span>&nbsp; &nbsp; if shift:</span> </td>
                      </tr><tr>
                        <th>305</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if shift is True: shift = max(-numpy.min(z), 0.0) + 0.5 # exact minimum</span> </td>
                      </tr><tr>
                        <th>306</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; z = z+shift</span> </td>
                      </tr><tr>
                        <th>307</th><th> </th><td class="l"><span>&nbsp; &nbsp; if scale: z = numpy.log(4*z*scale+1)+2</span> </td>
                      </tr><tr>
                        <th>308</th><th> </th><td class="l"><span>&nbsp; &nbsp; #XXX: need to 'correct' the z-axis (or provide easy conversion)</span> </td>
                      </tr><tr>
                        <th>309</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>310</th><th> </th><td class="l"><span>&nbsp; &nbsp; fig = plt.figure()</span> </td>
                      </tr><tr>
                        <th>311</th><th> </th><td class="l"><span>&nbsp; &nbsp; if surface and fill is None: # 'hidden' option; full 3D surface plot</span> </td>
                      </tr><tr>
                        <th>312</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ax = fig.gca(projection='3d')</span> </td>
                      </tr><tr>
                        <th>313</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; d = max(11 - density, 1) # or 1/density ?</span> </td>
                      </tr><tr>
                        <th>314</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; kwds = {'rstride':d,'cstride':d,'cmap':cm.jet,'linewidth':0}</span> </td>
                      </tr><tr>
                        <th>315</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ax.plot_surface(x, y, z, **kwds)</span> </td>
                      </tr><tr>
                        <th>316</th><th> </th><td class="l"><span>&nbsp; &nbsp; else:</span> </td>
                      </tr><tr>
                        <th>317</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if surface: kwds = {'projection':'3d'} # 3D</span> </td>
                      </tr><tr>
                        <th>318</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; elif surface is None: # 1D</span> </td>
                      </tr><tr>
                        <th>319</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; raise NotImplementedError('need to add an option string parser')</span> </td>
                      </tr><tr>
                        <th>320</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; else: kwds = {}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 2D</span> </td>
                      </tr><tr>
                        <th>321</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; ax = fig.gca(**kwds)</span> </td>
                      </tr><tr>
                        <th>322</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; density = 10*density</span> </td>
                      </tr><tr>
                        <th>323</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if fill: plotf = ax.contourf&nbsp; # filled contours</span> </td>
                      </tr><tr>
                        <th>324</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; else: plotf = ax.contour&nbsp; &nbsp; &nbsp; # wire contours</span> </td>
                      </tr><tr>
                        <th>325</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; plotf(x, y, z, density, cmap=cm.jet)</span> </td>
                      </tr><tr>
                        <th>326</th><th> </th><td class="l"><span>&nbsp; &nbsp; return fig</span> </td>
                      </tr><tr>
                        <th>327</th><th> </th><td class="l"><span></span> </td>
                      </tr>
                      <tr class="last">
                        <th> </th><th>11</th><td class="r"><span>__doc__ = model_plotter.__doc__</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>328</th><th>12</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>329</th><th>13</th><td class="l"><span>if __name__ == '__main__':</span> </td>
                  </tr>
            </tbody><tbody class="rem">
                  <tr class="first">
                          <th>330</th><th> </th><td class="l"><del>&nbsp; &nbsp;#FIXME: should be able to:</del> </td>
                  </tr><tr>
                          <th>331</th><th> </th><td class="l"><del>&nbsp; &nbsp;# - apply a constraint as a region of NaN -- apply when 'xx,yy=x[ij],y[ij]'</del> </td>
                  </tr><tr>
                          <th>332</th><th> </th><td class="l"><del>&nbsp; &nbsp;# - apply a penalty by shifting the surface (plot w/alpha?) -- as above</del> </td>
                  </tr><tr>
                          <th>333</th><th> </th><td class="l"><del>&nbsp; &nbsp;# - build an appropriately-sized default grid (from logfile info)</del> </td>
                  </tr><tr>
                          <th>334</th><th> </th><td class="l"><del>&nbsp; &nbsp;# - move all mulit-id param/cost reading into read_history</del> </td>
                  </tr><tr>
                          <th>335</th><th> </th><td class="l"><del>&nbsp; &nbsp;#FIXME: current issues:</del> </td>
                  </tr><tr>
                          <th>336</th><th> </th><td class="l"><del>&nbsp; &nbsp;# - 1D slice and projection work for 2D function, but aren't "pretty"</del> </td>
                  </tr><tr>
                          <th>337</th><th> </th><td class="l"><del>&nbsp; &nbsp;# - 1D slice and projection for 1D function, is it meaningful and correct?</del> </td>
                  </tr><tr>
                          <th>338</th><th> </th><td class="l"><del>&nbsp; &nbsp;# - should be able to plot from solver.genealogy (multi-monitor?) [1D,2D,3D?]</del> </td>
                  </tr><tr>
                          <th>339</th><th> </th><td class="l"><del>&nbsp; &nbsp;# - should be able to scale 'z-axis' instead of scaling 'z' itself</del> </td>
                  </tr><tr>
                          <th>340</th><th> </th><td class="l"><del>&nbsp; &nbsp;#&nbsp; &nbsp;(see https://github.com/matplotlib/matplotlib/issues/209)</del> </td>
                  </tr><tr>
                          <th>341</th><th> </th><td class="l"><del>&nbsp; &nbsp;# - if trajectory outside contour grid, will increase bounds</del> </td>
                  </tr><tr class="last">
                          <th>342</th><th> </th><td class="l"><del>&nbsp; &nbsp;#&nbsp; &nbsp;(see support_hypercube.py for how to fix bounds)</del> </td>
                  </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>343</th><th>14</th><td class="l"><span></span> </td>
                  </tr>
            </tbody><tbody class="mod">
                      <tr class="first">
                        <th>344</th><th> </th><td class="l"><span>&nbsp; &nbsp; #XXX: note that 'argparse' is new as of python2.7</span> </td>
                      </tr><tr>
                        <th>345</th><th> </th><td class="l"><span>&nbsp; &nbsp; from optparse import OptionParser</span> </td>
                      </tr><tr>
                        <th>346</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser = OptionParser(usage=__doc__)</span> </td>
                      </tr><tr>
                        <th>347</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-b","--bounds",action="store",dest="bounds",\</span> </td>
                      </tr><tr>
                        <th>348</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; metavar="STR",default="-5:5:.1, -5:5:.1",</span> </td>
                      </tr><tr>
                        <th>349</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; help="indicator string to set plot bounds and density")</span> </td>
                      </tr><tr>
                        <th>350</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-l","--label",action="store",dest="label",\</span> </td>
                      </tr><tr>
                        <th>351</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; metavar="STR",default=",,",</span> </td>
                      </tr><tr>
                        <th>352</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; help="string to assign label to axis")</span> </td>
                      </tr><tr>
                        <th>353</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-n","--nid",action="store",dest="id",\</span> </td>
                      </tr><tr>
                        <th>354</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; metavar="INT",default=None,</span> </td>
                      </tr><tr>
                        <th>355</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; help="id # of the nth simultaneous points to plot")</span> </td>
                      </tr><tr>
                        <th>356</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-i","--iter",action="store",dest="stop",\</span> </td>
                      </tr><tr>
                        <th>357</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; metavar="STR",default=":",</span> </td>
                      </tr><tr>
                        <th>358</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; help="string for smallest:largest iterations to plot")</span> </td>
                      </tr><tr>
                        <th>359</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-r","--reduce",action="store",dest="reducer",\</span> </td>
                      </tr><tr>
                        <th>360</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; metavar="STR",default="None",</span> </td>
                      </tr><tr>
                        <th>361</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; help="import path of output reducer function")</span> </td>
                      </tr><tr>
                        <th>362</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-x","--scale",action="store",dest="zscale",\</span> </td>
                      </tr><tr>
                        <th>363</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; metavar="INT",default=0.0,</span> </td>
                      </tr><tr>
                        <th>364</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; help="scale plotted cost by z=log(4*z*scale+1)+2")</span> </td>
                      </tr><tr>
                        <th>365</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-z","--shift",action="store",dest="zshift",\</span> </td>
                      </tr><tr>
                        <th>366</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; metavar="INT",default=0.0,</span> </td>
                      </tr><tr>
                        <th>367</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; help="shift plotted cost by z=z+shift")</span> </td>
                      </tr><tr>
                        <th>368</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-f","--fill",action="store_true",dest="fill",\</span> </td>
                      </tr><tr>
                        <th>369</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default=False,help="plot using filled contours")</span> </td>
                      </tr><tr>
                        <th>370</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-d","--depth",action="store_true",dest="surface",\</span> </td>
                      </tr><tr>
                        <th>371</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default=False,help="plot contours showing depth in 3D")</span> </td>
                      </tr><tr>
                        <th>372</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-o","--dots",action="store_true",dest="dots",\</span> </td>
                      </tr><tr>
                        <th>373</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default=False,help="show trajectory points in plot")</span> </td>
                      </tr><tr>
                        <th>374</th><th> </th><td class="l"><span>&nbsp; &nbsp; parser.add_option("-j","--join",action="store_true",dest="line",\</span> </td>
                      </tr><tr>
                        <th>375</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; default=False,help="connect trajectory points in plot")</span> </td>
                      </tr><tr>
                        <th>376</th><th> </th><td class="l"><span>&nbsp; &nbsp; parsed_opts, parsed_args = parser.parse_args()</span> </td>
                      </tr><tr>
                        <th>377</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>378</th><th> </th><td class="l"><span>&nbsp; &nbsp; # get the import path for the model</span> </td>
                      </tr><tr>
                        <th>379</th><th> </th><td class="l"><span>&nbsp; &nbsp; model = parsed_args[0]&nbsp; # e.g. 'mystic.models.rosen'</span> </td>
                      </tr><tr>
                        <th>380</th><th> </th><td class="l"><span>&nbsp; &nbsp; if "None" == model: model = None #XXX: 'required'... allow this?</span> </td>
                      </tr><tr>
                        <th>381</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>382</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # get the name of the parameter log file</span> </td>
                      </tr><tr>
                        <th>383</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; source = parsed_args[1]&nbsp; # e.g. 'log.txt'</span> </td>
                      </tr><tr>
                        <th>384</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>385</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; source = None</span> </td>
                      </tr><tr>
                        <th>386</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>387</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # select the bounds</span> </td>
                      </tr><tr>
                        <th>388</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; options = parsed_opts.bounds&nbsp; # format is "-1:10:.1, -1:10:.1, 1.0"</span> </td>
                      </tr><tr>
                        <th>389</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>390</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; options = "-5:5:.1, -5:5:.1"</span> </td>
                      </tr><tr>
                        <th>391</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>392</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # plot using filled contours</span> </td>
                      </tr><tr>
                        <th>393</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; fill = parsed_opts.fill</span> </td>
                      </tr><tr>
                        <th>394</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>395</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; fill = False</span> </td>
                      </tr><tr>
                        <th>396</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>397</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # plot contours showing depth in 3D</span> </td>
                      </tr><tr>
                        <th>398</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; surface = parsed_opts.surface</span> </td>
                      </tr><tr>
                        <th>399</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>400</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; surface = False</span> </td>
                      </tr><tr>
                        <th>401</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>402</th><th> </th><td class="l"><span>&nbsp; &nbsp; #XXX: can't do '-x' with no argument given&nbsp; (use T/F instead?)</span> </td>
                      </tr><tr>
                        <th>403</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # scale plotted cost by z=log(4*z*scale+1)+2</span> </td>
                      </tr><tr>
                        <th>404</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; scale = float(parsed_opts.zscale)</span> </td>
                      </tr><tr>
                        <th>405</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; if not scale: scale = False</span> </td>
                      </tr><tr>
                        <th>406</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>407</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; scale = False</span> </td>
                      </tr><tr>
                        <th>408</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>409</th><th> </th><td class="l"><span>&nbsp; &nbsp; #XXX: can't do '-z' with no argument given</span> </td>
                      </tr><tr>
                        <th>410</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # shift plotted cost by z=z+shift</span> </td>
                      </tr><tr>
                        <th>411</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; shift = float(parsed_opts.zshift)</span> </td>
                      </tr><tr>
                        <th>412</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; if not shift: shift = False</span> </td>
                      </tr><tr>
                        <th>413</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>414</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; shift = False</span> </td>
                      </tr><tr>
                        <th>415</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>416</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # import path of output reducer function</span> </td>
                      </tr><tr>
                        <th>417</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; reducer = parsed_opts.reducer&nbsp; # e.g. 'numpy.add'</span> </td>
                      </tr><tr>
                        <th>418</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; if "None" == reducer: reducer = None</span> </td>
                      </tr><tr>
                        <th>419</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>420</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; reducer = None</span> </td>
                      </tr><tr>
                        <th>421</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>422</th><th> </th><td class="l"><span>&nbsp; &nbsp; style = '-' # default linestyle</span> </td>
                      </tr><tr>
                        <th>423</th><th> </th><td class="l"><span>&nbsp; &nbsp; if parsed_opts.dots:</span> </td>
                      </tr><tr>
                        <th>424</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; mark = 'o' # marker=mark</span> </td>
                      </tr><tr>
                        <th>425</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; # when using 'dots', also can turn off 'line'</span> </td>
                      </tr><tr>
                        <th>426</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; if not parsed_opts.line:</span> </td>
                      </tr><tr>
                        <th>427</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; style = '' # linestyle='None'</span> </td>
                      </tr><tr>
                        <th>428</th><th> </th><td class="l"><span>&nbsp; &nbsp; else:</span> </td>
                      </tr><tr>
                        <th>429</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; mark = ''</span> </td>
                      </tr><tr>
                        <th>430</th><th> </th><td class="l"><span>&nbsp; &nbsp; color = 'w' if fill else 'k'</span> </td>
                      </tr><tr>
                        <th>431</th><th> </th><td class="l"><span>&nbsp; &nbsp; style = color + style + mark</span> </td>
                      </tr><tr>
                        <th>432</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>433</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # select labels for the axes</span> </td>
                      </tr><tr>
                        <th>434</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; label = parsed_opts.label.split(',')&nbsp; # format is "x, y, z"</span> </td>
                      </tr><tr>
                        <th>435</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>436</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; label = ['','','']</span> </td>
                      </tr><tr>
                        <th>437</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>438</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # select which 'id' to plot results for</span> </td>
                      </tr><tr>
                        <th>439</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; ids = (int(parsed_opts.id),) #XXX: allow selecting more than one id ?</span> </td>
                      </tr><tr>
                        <th>440</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>441</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; ids = None # i.e. 'all'</span> </td>
                      </tr><tr>
                        <th>442</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>443</th><th> </th><td class="l"><span>&nbsp; &nbsp; try: # select which iteration to stop plotting at</span> </td>
                      </tr><tr>
                        <th>444</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; stop = parsed_opts.stop&nbsp; # format is "1:10:1"</span> </td>
                      </tr><tr>
                        <th>445</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; stop = stop if ":" in stop else ":"+stop</span> </td>
                      </tr><tr>
                        <th>446</th><th> </th><td class="l"><span>&nbsp; &nbsp; except:</span> </td>
                      </tr><tr>
                        <th>447</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; stop = ":"</span> </td>
                      </tr><tr>
                        <th>448</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>449</th><th> </th><td class="l"><span>&nbsp; &nbsp; #################################################</span> </td>
                      </tr><tr>
                        <th>450</th><th> </th><td class="l"><span>&nbsp; &nbsp; solver = None&nbsp; # set to 'mystic.solvers.fmin' (or similar) for 'live' fits</span> </td>
                      </tr><tr>
                        <th>451</th><th> </th><td class="l"><span>&nbsp; &nbsp; #NOTE: 'live' runs constrain params explicitly in the solver, then reduce</span> </td>
                      </tr><tr>
                        <th>452</th><th> </th><td class="l"><span>&nbsp; &nbsp; #&nbsp; &nbsp; &nbsp; dimensions appropriately so results can be 2D contour plotted.</span> </td>
                      </tr><tr>
                        <th>453</th><th> </th><td class="l"><span>&nbsp; &nbsp; #&nbsp; &nbsp; &nbsp; When working with legacy results that have more than 2 params,</span> </td>
                      </tr><tr>
                        <th>454</th><th> </th><td class="l"><span>&nbsp; &nbsp; #&nbsp; &nbsp; &nbsp; the trajectory WILL NOT follow the masked surface generated</span> </td>
                      </tr><tr>
                        <th>455</th><th> </th><td class="l"><span>&nbsp; &nbsp; #&nbsp; &nbsp; &nbsp; because the masked params were NOT fixed when the solver was run.</span> </td>
                      </tr><tr>
                        <th>456</th><th> </th><td class="l"><span>&nbsp; &nbsp; #################################################</span> </td>
                      </tr><tr>
                        <th>457</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>458</th><th> </th><td class="l"><span>&nbsp; &nbsp; from mystic.tools import reduced, masked, partial</span> </td>
                      </tr><tr>
                        <th>459</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>460</th><th> </th><td class="l"><span>&nbsp; &nbsp; # process inputs</span> </td>
                      </tr><tr>
                        <th>461</th><th> </th><td class="l"><span>&nbsp; &nbsp; select, spec, mask = parse_input(options)</span> </td>
                      </tr><tr>
                        <th>462</th><th> </th><td class="l"><span>&nbsp; &nbsp; x,y = parse_axes(spec, grid=True) # grid=False for 1D plots</span> </td>
                      </tr><tr>
                        <th>463</th><th> </th><td class="l"><span>&nbsp; &nbsp; #FIXME: does grid=False still make sense here...?</span> </td>
                      </tr><tr>
                        <th>464</th><th> </th><td class="l"><span>&nbsp; &nbsp; if reducer: reducer = get_instance(reducer)</span> </td>
                      </tr><tr>
                        <th>465</th><th> </th><td class="l"><span>&nbsp; &nbsp; if solver and (not source or not model):</span> </td>
                      </tr><tr>
                        <th>466</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; raise RuntimeError('a model and results filename are required')</span> </td>
                      </tr><tr>
                        <th>467</th><th> </th><td class="l"><span>&nbsp; &nbsp; elif not source and not model:</span> </td>
                      </tr><tr>
                        <th>468</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; raise RuntimeError('a model or a results file is required')</span> </td>
                      </tr><tr>
                        <th>469</th><th> </th><td class="l"><span>&nbsp; &nbsp; if model:</span> </td>
                      </tr><tr>
                        <th>470</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; model = get_instance(model)</span> </td>
                      </tr><tr>
                        <th>471</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # need a reducer if model returns an array</span> </td>
                      </tr><tr>
                        <th>472</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if reducer: model = reduced(reducer, arraylike=False)(model)</span> </td>
                      </tr><tr>
                        <th>473</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>474</th><th> </th><td class="l"><span>&nbsp; &nbsp; if solver:</span> </td>
                      </tr><tr>
                        <th>475</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # if 'live'... pick a solver</span> </td>
                      </tr><tr>
                        <th>476</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; solver = 'mystic.solvers.fmin'</span> </td>
                      </tr><tr>
                        <th>477</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; solver = get_instance(solver)</span> </td>
                      </tr><tr>
                        <th>478</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; xlen = len(select)+len(mask)</span> </td>
                      </tr><tr>
                        <th>479</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if solver.__name__.startswith('diffev'):</span> </td>
                      </tr><tr>
                        <th>480</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; initial = [(-1,1)]*xlen</span> </td>
                      </tr><tr>
                        <th>481</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; else:</span> </td>
                      </tr><tr>
                        <th>482</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; initial = [0]*xlen</span> </td>
                      </tr><tr>
                        <th>483</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; from mystic.monitors import VerboseLoggingMonitor</span> </td>
                      </tr><tr>
                        <th>484</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; itermon = VerboseLoggingMonitor(filename=source, new=True)</span> </td>
                      </tr><tr>
                        <th>485</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # explicitly constrain parameters</span> </td>
                      </tr><tr>
                        <th>486</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; model = partial(mask)(model)</span> </td>
                      </tr><tr>
                        <th>487</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # solve</span> </td>
                      </tr><tr>
                        <th>488</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; sol = solver(model, x0=initial, itermon=itermon)</span> </td>
                      </tr><tr>
                        <th>489</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>490</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; #-OVERRIDE-INPUTS-# </span> </td>
                      </tr><tr>
                        <th>491</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; import numpy</span> </td>
                      </tr><tr>
                        <th>492</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # read trajectories from monitor (comment out to use logfile)</span> </td>
                      </tr><tr>
                        <th>493</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; source = itermon</span> </td>
                      </tr><tr>
                        <th>494</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # if negative minimum, shift by the 'solved minimum' plus an epsilon</span> </td>
                      </tr><tr>
                        <th>495</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; shift = max(-numpy.min(itermon.y), 0.0) + 0.5 # a good guess</span> </td>
                      </tr><tr>
                        <th>496</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; #-----------------#</span> </td>
                      </tr><tr>
                        <th>497</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>498</th><th> </th><td class="l"><span>&nbsp; &nbsp; if model: # for plotting, implicitly constrain by reduction</span> </td>
                      </tr><tr>
                        <th>499</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; model = masked(mask)(model)</span> </td>
                      </tr><tr>
                        <th>500</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>501</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp;## plot the surface in 1D</span> </td>
                      </tr><tr>
                        <th>502</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp;#if solver: v=sol[-1]</span> </td>
                      </tr><tr>
                        <th>503</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp;#elif source: v=cost[-1]</span> </td>
                      </tr><tr>
                        <th>504</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp;#else: v=None</span> </td>
                      </tr><tr>
                        <th>505</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp;#fig0 = draw_slice(model, x=x, y=v, scale=scale, shift=shift)</span> </td>
                      </tr><tr>
                        <th>506</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # plot the surface in 2D or 3D</span> </td>
                      </tr><tr>
                        <th>507</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; fig = draw_contour(model, x, y, surface=surface, fill=fill, scale=scale, shift=shift)</span> </td>
                      </tr><tr>
                        <th>508</th><th> </th><td class="l"><span>&nbsp; &nbsp; else:</span> </td>
                      </tr><tr>
                        <th>509</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp;#fig0 = None</span> </td>
                      </tr><tr>
                        <th>510</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; fig = None</span> </td>
                      </tr><tr>
                        <th>511</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>512</th><th> </th><td class="l"><span>&nbsp; &nbsp; if source:</span> </td>
                      </tr><tr>
                        <th>513</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # params are the parameter trajectories</span> </td>
                      </tr><tr>
                        <th>514</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; # cost is the solution trajectory</span> </td>
                      </tr><tr>
                        <th>515</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; params, cost = get_history(source, ids)</span> </td>
                      </tr><tr>
                        <th>516</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; if len(cost) &gt; 1: style = style[1:] # 'auto-color' #XXX: or grayscale?</span> </td>
                      </tr><tr>
                        <th>517</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>518</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; for p,c in zip(params, cost):</span> </td>
                      </tr><tr>
                        <th>519</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;## project trajectory on a 1D slice of model surface #XXX: useful?</span> </td>
                      </tr><tr>
                        <th>520</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#s = select[0] if len(select) else 0</span> </td>
                      </tr><tr>
                        <th>521</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#px = p[int(s)] # draw_projection requires one parameter</span> </td>
                      </tr><tr>
                        <th>522</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;## ignore everything after 'stop'</span> </td>
                      </tr><tr>
                        <th>523</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#_c = eval('c[%s]' % stop)</span> </td>
                      </tr><tr>
                        <th>524</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#_x = eval('px[%s]' % stop)</span> </td>
                      </tr><tr>
                        <th>525</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;#fig0 = draw_projection(_x,_c, style=style, scale=scale, shift=shift, figure=fig0)</span> </td>
                      </tr><tr>
                        <th>526</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>527</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # plot the trajectory on the model surface (2D or 3D)</span> </td>
                      </tr><tr>
                        <th>528</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # get two selected params #XXX: what if len(select)&lt;2? or len(p)&lt;2?</span> </td>
                      </tr><tr>
                        <th>529</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; p = [p[int(i)] for i in select[:2]]</span> </td>
                      </tr><tr>
                        <th>530</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; px,py = p # draw_trajectory requires two parameters</span> </td>
                      </tr><tr>
                        <th>531</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # ignore everything after 'stop'</span> </td>
                      </tr><tr>
                        <th>532</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _x = eval('px[%s]' % stop)</span> </td>
                      </tr><tr>
                        <th>533</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _y = eval('py[%s]' % stop)</span> </td>
                      </tr><tr>
                        <th>534</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; _c = eval('c[%s]' % stop) if surface else None</span> </td>
                      </tr><tr>
                        <th>535</th><th> </th><td class="l"><span>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; fig = draw_trajectory(_x,_y,_c, style=style, scale=scale, shift=shift, figure=fig)</span> </td>
                      </tr><tr>
                        <th>536</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>537</th><th> </th><td class="l"><span>&nbsp; &nbsp; # add labels to the axes</span> </td>
                      </tr><tr>
                        <th>538</th><th> </th><td class="l"><span>&nbsp; &nbsp; if surface: kwds = {'projection':'3d'} # 3D</span> </td>
                      </tr><tr>
                        <th>539</th><th> </th><td class="l"><span>&nbsp; &nbsp; else: kwds = {}&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; # 2D</span> </td>
                      </tr><tr>
                        <th>540</th><th> </th><td class="l"><span>&nbsp; &nbsp; ax = fig.gca(**kwds)</span> </td>
                      </tr><tr>
                        <th>541</th><th> </th><td class="l"><span>&nbsp; &nbsp; ax.set_xlabel(label[0])</span> </td>
                      </tr><tr>
                        <th>542</th><th> </th><td class="l"><span>&nbsp; &nbsp; ax.set_ylabel(label[1])</span> </td>
                      </tr><tr>
                        <th>543</th><th> </th><td class="l"><span>&nbsp; &nbsp; if surface: ax.set_zlabel(label[2])</span> </td>
                      </tr><tr>
                        <th>544</th><th> </th><td class="l"><span></span> </td>
                      </tr><tr>
                        <th>545</th><th> </th><td class="l"><span>&nbsp; &nbsp; plt.show()</span> </td>
                      </tr>
                      <tr>
                        <th> </th><th>15</th><td class="r"><span>&nbsp; &nbsp; import sys</span> </td>
                      </tr><tr class="last">
                        <th> </th><th>16</th><td class="r"><span>&nbsp; &nbsp; model_plotter(cmdargs=sys.argv[1:])</span> </td>
                      </tr>
            </tbody><tbody class="unmod">
                  <tr>
                          <th>546</th><th>17</th><td class="l"><span></span> </td>
                  </tr><tr>
                          <th>547</th><th>18</th><td class="l"><span></span> </td>
                  </tr>
            </tbody>
        </table>
      </li>
  </ul>
</div>
        <div id="help"><strong>Note:</strong> See <a href="../../wiki/TracChangeset.html">TracChangeset</a>
          for help on using the changeset viewer.</div>
      </div>
    </div>
    <div id="altlinks">
      <h3>Download in other formats:</h3>
      <ul>
        <li class="first">
          <a rel="nofollow" href="http://trac.mystic.cacr.caltech.edu/project/mystic/changeset/804/?format=diff&amp;new=804" class="diff">Unified Diff</a>
        </li><li class="last">
          <a rel="nofollow" href="http://trac.mystic.cacr.caltech.edu/project/mystic/changeset/804/?format=zip&amp;new=804" class="zip">Zip Archive</a>
        </li>
      </ul>
    </div>
    </div>
    <div id="footer" lang="en" xml:lang="en"><hr />
      <a id="uqf" href="http://www.uqfoundation.org/"><img src="http://www.cacr.caltech.edu/projects/mystic/UQ.png" height="38" width="50" alt="UQ Foundation" /></a>
      <a id="caltech"><img src="http://www.cacr.caltech.edu/projects/mystic/Caltech.png" height="40" width="40" alt="Caltech" /></a>
      <a id="nsf"><img src="http://www.cacr.caltech.edu/projects/mystic/NSF.png" height="42" width="42" alt="NSF" /></a>
      <a id="afosr"><img src="http://www.cacr.caltech.edu/projects/mystic/AFOSR.png" height="40" width="40" alt="AFOSR" /></a>
      <a id="doe"><img src="http://www.cacr.caltech.edu/projects/mystic/DOE.png" height="40" width="40" alt="DOE" /></a>
      <a id="nnsa"><img src="http://www.cacr.caltech.edu/projects/mystic/NNSA.png" height="40" width="100" alt="NNSA" /></a>
      <p class="left">Powered by <a href="../../about.html"><strong>Trac 0.12</strong></a><br />
        and coffee, lots of coffee.<br />
        This project is funded by...</p>
      <p class="right">For more information, please visit<br />the mystic project homepage at<br /><a href="http://www.cacr.caltech.edu/projects/mystic">http://www.cacr.caltech.edu/projects/mystic</a></p>
    </div>
    <div id="sitefooter">
    </div>
  </body>

<!-- Mirrored from trac.mystic.cacr.caltech.edu/project/mystic/changeset/804/ by HTTrack Website Copier/3.x [XR&CO'2014], Wed, 18 May 2016 23:24:46 GMT -->
</html>